// ==== LIBRARY ==== //

/* Mixins, functions, and other non-declarative things */

/*
 * 1. Settings
 * 2. Gradients
 * 3. Overlays
 * 4. Link Styles
 */


// 1. Settings //

/* 
 * A simple function to retrieve a color from the palette.
 * Adapted from http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/ 
 */
@function palette($palette, $tone: 'base') {
    @return map-get(map-get($_palettes, $palette), $tone);
}

/* A simple function to retrieve theme metadata */
@function metadata($request) {
  @return map-get($_metadata, $request);
}



// 2. Gradients //

@function gradient($direction, $color-stops...) {
  @return linear-gradient($direction, $color-stops);
}



// 3. Overlays //

@mixin overlay {
  position: relative;
  &:after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    height: 100%;
    width: 100%;
    z-index: 10;
    background: rgba(0,0,0,0.25);
  }
}

@mixin overlay-gradient {
  position: relative;
  &:after {
    content: "";
    position: absolute;
    bottom: 0;
    height: 50%;
    width: 100%;
    z-index: 10;
    background: gradient(0deg, rgba(0,0,0,0.5), transparent);
    @include mappy-query(phone) {
      background: rgba(0,0,0,0.25);
      height: 100%;
    }
  }
}

@mixin overlay-text {
  color: palette(white);
  text-shadow: 0px 0px 4px palette(gray);
}



// 4. Link Styles //

@mixin link-arrow($direction: none, $color: none) {
  transform: translate(0px, 0px) translateZ(0px);
  transition: color $anim-s;
  color: palette($color);
  cursor: pointer;
  &:hover,
  &:focus {
    color: palette($color, light);
  }
  @if $direction == right {
    &:after {
      content: '→';
      color: inherit;
      padding-left: vr(0.2);
      display: inline-block;
      transform: translate(0, 0);
      transition: transform $anim-s;
    }
    &:hover:after,
    &:focus:after {
      transform: translate(0.35rem, 0);
    }
  }
  @else if $direction == left {
    &:before {
      content: '←';
      color: inherit;
      padding-right: vr(0.2);
      display: inline-block;
      transform: translate(0, 0);
      transition: transform $anim-s;
    }
    &:hover:before,
    &:focus:before {
      transform: translate(-0.35rem, 0);
    }
  }
  @else if $direction == down {
    &:after {
      content: '↓';
      color: inherit;
      padding-left: vr(0.2);
      display: inline-block;
      transform: translate(0, 0);
      transition: transform $anim-s;
    }
    &:hover:after,
    &:focus:after {
      transform: translate(0, 0.35rem);
    }
  }
  @else {
    @warn "Mixin link-arrow() received invalid input! This direction does not exist.";
    font-size: ms(10);
    color: purple;
  }
}

@mixin link-underline($color: none) {
  position: relative;
  z-index: 1;
  color: palette($color);
  display: inline-block;
  cursor: pointer;
  transition: color $anim-s;
  &:after {
    content: "";
    position: absolute;
    width: 100%;
    height: 2px;
    bottom: 0;
    left: 0;
    z-index: -1;
    background-color: palette($color, light);
    visibility: hidden;
    transform: translate(0px,2px);
    opacity: 0;
    transition: visibility $anim-s, opacity $anim-s, transform $anim-s;
  }
  &:hover,
  &:focus {
    color: palette($color, light);
  }
  &:hover:after,
  &:focus:after {
    visibility: visible;
    opacity: 1;
    transform: translate(0px,-2px);
  }
}
